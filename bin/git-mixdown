#!/bin/bash
#
# "mixdown" multiple branches into a combined working branch.
# Useful for testing a combination of bugfixes / features at once
# via a throw-away temporary working branch.

combined_branch=working

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo >&2 "$*"
        echo
    fi

    me=`basename $0`

    cat <<EOF >&2
Usage: $me [options] [BASE-BRANCH BRANCH2 [BRANCH3 ...]]
Options:
  -h, --help            Show this help and exit
  -b, --branch BRANCH   Target branch for mixdown [default: $combined_branch]
  -c, --checkout        Leave target branch checked out
                        [default: restore previous checkout]

Points the target branch at BASE-BRANCH and then mixes all the other
branches in.  Leaves the working copy with the target branch checked out.

If no arguments are given, branches are read from .git/working-branches
instead, which should be delimited by whitespace and/or newlines.
EOF
    exit "$exit_code"
}

parse_opts () {
    checkout=

    while [ $# != 0 ]; do
        case "$1" in
            -h|--help)
                usage 0
                ;;
            -b|--branch)
                combined_branch="$2"
                shift 2
                ;;
            -c|--checkout)
                checkout=y
                shift
                ;;
            -*)
                usage "Unrecognised option: $1"
                ;;
            *)
                break
                ;;
        esac
    done

    if [ $# = 1 ]; then
        usage
    fi

    if [ $# = 0 ]; then
        git_dir=`git rev-parse --git-dir` || exit 1
        branch_file="$git_dir/working-branches"
        if ! [ -e "$branch_file" ]; then
            fatal "No arguments given but $branch_file didn't exist"
        fi
        branches=( $( grep -v '^ *#' "$branch_file" ) )
        base="${branches[0]}"
        unset branches[0]
    else
        base="$1"
        shift
        branches=( "$@" )
    fi

    echo "Will start at $base and merge: ${branches[@]}"
}

fatal () {
    echo "$*" >&2
    exit 1
}

safe_run () {
    if ! "$@"; then
        fatal "$* failed! Aborting." >&2
    fi
}

restore_head () {
    if [ -n "$orig_head" ]; then
        echo "Checking out original HEAD ($orig_head) ... "
        git checkout "$orig_head"
    else
        echo "WARNING: Couldn't determine original HEAD; current HEAD is probably different".
    fi
}

main () {
    parse_opts "$@"

    orig_head=`git rev-parse --abbrev-ref HEAD`
    safe_run git checkout -B "$combined_branch" "$base"
    safe_run git merge --no-edit "${branches[@]}"
    if [ -z "$checkout" ]; then
        restore_head
    fi
}

main "$@"
