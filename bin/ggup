#!/bin/bash

# Git UPstream - figure out ref of local branch's upstream remote/branch

me=`basename $0`

usage () {
    # Call as: usage [EXITCODE] [USAGE MESSAGE]
    exit_code=1
    if [[ "$1" == [0-9] ]]; then
        exit_code="$1"
        shift
    fi
    if [ -n "$1" ]; then
        echo "$*" >&2
        echo
    fi

    cat <<EOF >&2
Usage: $me [<local branch>]
Outputs the upstream remote/branch for a given local branch,
if it can be calculated.

The local branch defaults to HEAD.
EOF
    exit "$exit_code"
}

get_svn_upstream () {
    if ! [ -d "$root/.git/svn" ]; then
        return 1
    fi

    if [ `ls "$root/.git/svn" | wc -l` == 1 ]; then
        if upstream=`cd $root/.git/svn && ls`; then
            return 0
        else
            echo "WARNING: cd $root/.git/svn && ls failed" >&2
        fi
    fi

    if ! svn_info=$( git svn info 2>&1 ); then
        return 1
    fi

    if echo "$svn_info" | grep -q 'Unable to determine upstream SVN info'; then
        return 1
    fi

    svn_branch=$(
        echo "$svn_info" |
            perl -lne '
                /^URL: (.+)/ and $u = $1;
                if (/^Repository Root: (.+)/) {
                    $r = $1;
                    $u =~ s!\Q$r/!!;

                    # This bit required since git svn info changed to including
                    # the subpath of the cwd in the URL (somewhere in between 1.6.0
                    # and 1.7.1):
                    ($subdir = `git prefix`) =~ s!/\n$!!;
                    $u =~ s!/$subdir$!!; 

                    print $u
                }'
    )
    # Need to apply refspec transformation;
    #svn_branches_map=$( git config svn-remote.svn.branches )
    # for now we just assume standard layout and cheat.
    upstream="remotes/${svn_branch#branches/}"
    return 0
}

get_upstream () {
    # If the upstream is explicitly specified in config, we honor that.
    local_branch="$1"
    upstream_remote_conf="branch.$local_branch.remote"
    upstream_remote=$(git config "$upstream_remote_conf")
    if [ -n "$upstream_remote" ]; then
        upstream_branch_conf="branch.$local_branch.merge"
        upstream_branch=$(git config "$upstream_branch_conf")
        if [ -n "$upstream_branch" ]; then
            upstream_branch="${upstream_branch#refs/heads/}"
            if [ "$upstream_remote" = '.' ]; then
                upstream="$upstream_branch"
            else
                upstream="$upstream_remote/$upstream_branch"
            fi
            if git rev-parse "$upstream" >/dev/null 2>&1; then
                return
            fi
        else
            upstream="$upstream_remote/$local_branch"
            if git rev-parse "$upstream_remote" >/dev/null 2>&1; then
                return
            else
                echo "Couldn't determine upstream branch from $remotebranchconf = $upstream" >&2
                exit 1
            fi
        fi
    fi

    if ! get_svn_upstream; then
        # Need to apply refspec transformation; for now we just guess
        # that the upstream was a git repository, and that the local
        # and remote branches have the same name.  'origin' is just
        # the name that git uses by default to refer to the
        # repository that you cloned from.
        upstream=origin/$local_branch
    fi
}

root="`git root`"
if ! [ -d "$root" ]; then
    exit 1
fi

if [ "$1" == '-h' ] || [ "$1" == '--help' ] || [ $# -gt 1 ]; then
    usage 0
fi

local_branch="$1"
if [ $# -eq 0 ]; then
    local_branch="`git head`"
fi

get_upstream "$local_branch"

if ! git rev-parse "$upstream" >/dev/null 2>&1; then
    cat <<EOF >&2
Best guess '$upstream' was invalid.
Maybe you should do:

   git config branch.$local_branch.remote \$remote

Couldn't figure out upstream ref; aborting.
EOF
    exit 1
fi

echo "$upstream"

