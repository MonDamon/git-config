#!/usr/bin/python

from __future__ import print_function

import argparse
import logging
import os
import re
import sys
import subprocess
import types
from textwrap import dedent, wrap

import pygit2

def abort(msg, exitcode=1):
    print >>sys.stderr, msg
    sys.exit(exitcode)

class DependencyListener:
    """Class for listening to result events generated by
    DependencyDetector.  Add an instance of this class to a
    DependencyDetector instance via DependencyDetector.add_listener().
    """

    def __init__(self, options):
        self.options = options

    def new_dependent(self, dependent):
        pass

    def new_dependency(self, dependent, dependency, path, line_num):
        pass

    def new_path(self, dependent, dependency, path, line_num):
        pass

    def new_line(self, dependent, dependency, path, line_num):
        pass

    def dependent_done(self, dependent, dependencies):
        pass

class CLIDependencyListener(DependencyListener):
    """Dependency listener for use when running in CLI mode.

    This allows us to output dependencies as they are discovered,
    rather than waiting for all dependencies to be discovered before
    outputting anything; the latter approach can make the user wait
    too long for useful output if recursion is enabled.
    """

    def dependent_done(self, dependent, dependencies):
        dependent_sha = dependent.hex

        for dependency_sha in dependencies:
            if self.options.log:
                print()

            if self.options.recurse:
                if self.options.log:
                    print("\n%s depends on:" % dependent_sha)
                else:
                    print("%s %s" % (dependent_sha, dependency_sha))
            else:
                if not self.options.log:
                    print(dependency_sha)

            if self.options.log:
                subprocess.call([ 'git', 'log', "%s^!" % dependency_sha ])
                # dependency = detector.get_commit(dependency_sha)
                # print(dependency.message + "\n")

            # for path in self.dependencies[dependency]:
            #     print("  %s" % path)
            #     print("    %s" % ", ".join(sorted(self.dependencies[dependency][path].keys())))

class DependencyDetector:
    """Class for automatically detecting dependencies between git commits.
    A dependency is inferred by diffing the commit with each of its
    parents, and for each resulting hunk, performing a blame to see
    which commit was responsible for introducing the lines to which
    the hunk was applied.

    Dependencies can be traversed recursively, building a dependency
    tree represented (conceptually) by a list of edges.
    """

    def __init__(self, options, repo_path=None, logger=None, listener=None):
        self.options = options

        if logger is None:
            self.logger = self.default_logger()

        if repo_path is None:
            try:
                repo_path = pygit2.discover_repository('.')
            except KeyError:
                abort("Couldn't find a repository in the current directory.")

        self.repo = pygit2.Repository(repo_path)

        # Nested dict mapping dependents -> dependencies -> files
        # causing that dependency -> numbers of lines within that file
        # causing that dependency.  The first two levels form edges in
        # the dependency graph, and the latter two tell us what caused
        # those edges.
        self.dependencies = {}

        # A TODO list (queue) of dependencies which haven't yet been
        # recursively followed.  Only useful when recursing.
        self.todo = []

        # An ordered list of commits whose dependencies we have
        # already detected.
        self.done = []

        # A cache mapping SHAs to commit objects
        self.commits = {}

        # Callbacks to be invoked when a new dependency has been
        # discovered.
        self.listeners = []

        if listener:
            self.listeners.append(listener)

    def add_listener(self, listener):
        if not isinstance(listener, types.Functiontype):
            raise RuntimeError("listener must be a function")
        self.listener.append(listener)

    def notify_listeners(self, event, *args):
        for listener in self.listeners:
            fn = getattr(listener, event)
            fn(*args)

    def default_logger(self):
        if not self.options.debug:
            return logging.getLogger(self.__class__.__name__)

        log_format = '%(asctime)-15s %(levelname)-6s %(message)s'
        date_format = '%b %d %H:%M:%S'
        formatter = logging.Formatter(fmt=log_format, datefmt=date_format)
        handler = logging.StreamHandler(stream=sys.stdout)
        handler.setFormatter(formatter)
        #logger = logging.getLogger(__name__)
        logger = logging.getLogger(self.__class__.__name__)
        logger.setLevel(logging.DEBUG)
        logger.addHandler(handler)
        return logger

    def get_commit(self, rev):
        if rev in self.commits:
            return self.commits[rev]

        try:
            self.commits[rev] = self.repo.revparse_single(rev)
        except KeyError:
            abort("Couldn't parse %s" % rev)

        return self.commits[rev]

    def find_dependencies(self, dependent_rev, recurse=None):
        if recurse is None:
            recurse = self.options.recurse

        dependent = self.get_commit(dependent_rev)
        self.todo.append(dependent)

        while self.todo:
            dependent = self.todo.pop(0)
            self.logger.debug("Processing %s from TODO list" % dependent.hex[:8])

            for parent in dependent.parents:
                self.find_dependencies_with_parent(dependent, parent)
            self.done.append(dependent.hex)
            self.logger.debug("Found all dependencies for %s" % dependent.hex[:8])
            # A commit won't have any dependencies if it only added new files
            dependencies = self.dependencies.get(dependent.hex, {})
            self.notify_listeners('dependent_done', dependent, dependencies)

    def find_dependencies_with_parent(self, dependent, parent):
        self.logger.debug("  Finding dependencies of %s via parent %s" %
                          (dependent.hex[:8], parent.hex[:8]))
        diff = self.repo.diff(parent, dependent, context_lines=self.options.context_lines)
        for patch in diff:
            path = patch.old_file_path
            self.logger.debug("    Examining hunks in %s" % path)
            for hunk in patch.hunks:
                self.blame_hunk(dependent, parent, path, hunk)

    def blame_hunk(self, dependent, parent, path, hunk):
        first_line_num = hunk.old_start
        line_range_before = "-%d,%d" % (hunk.old_start, hunk.old_lines)
        line_range_after  = "+%d,%d" % (hunk.new_start, hunk.new_lines)
        self.logger.debug("      Blaming hunk %s @ %s" %
                          (line_range_before, parent.hex[:8]))

        if not self.tree_lookup(path, parent):
            # This is probably because dependent added a new directory
            # which was not previously in the parent.
            self.logger.debug("      %s not in %s tree" %
                              (path, parent.hex[:8]))
            return

        cmd = [
            'git', 'blame', parent.hex,
            '--porcelain',
            '-L', "%d,+%d" % (hunk.old_start, hunk.old_lines),
            path
        ]
        blame = subprocess.check_output(cmd)

        dependent_sha = dependent.hex
        if dependent_sha not in self.dependencies:
            self.logger.debug('        New dependent: %s' % dependent_sha[:8])
            self.dependencies[dependent_sha] = {}
            self.notify_listeners('new_dependent', dependent)

        line_to_culprit = {}

        for line in blame.split('\n'):
            #self.logger.debug('      !' + line.rstrip())
            m = re.match('^([0-9a-f]{40}) (\d+) (\d+)( \d+)?$', line)
            if not m:
                continue
            dependency_sha, orig_line_num, line_num = m.group(1, 2, 3)
            dependency = self.get_commit(dependency_sha)

            if dependency_sha not in self.dependencies[dependent_sha]:
                self.logger.debug('        New dependency %s via line %s' %
                                  (dependency_sha[:8], line_num))
                self.dependencies[dependent_sha][dependency_sha] = {}
                self.notify_listeners('new_dependency', dependent, dependency, path, line_num)
                if dependency_sha not in self.dependencies:
                    if self.options.recurse:
                        self.todo.append(dependency)
                        self.logger.debug('          added to TODO')
            if path not in self.dependencies[dependent_sha][dependency_sha]:
                self.dependencies[dependent_sha][dependency_sha][path] = {}
                self.notify_listeners('new_path', dependent, dependency, path, line_num)
            if line_num in self.dependencies[dependent_sha][dependency_sha][path]:
                abort("line %d already found when blaming %s:%s" %
                      (line_num, dependent.hex[:8], path))
            self.dependencies[dependent_sha][dependency_sha][path][line_num] = True
            self.notify_listeners('new_line', dependent, dependency, path, line_num)
            line_to_culprit[int(line_num)] = dependency.hex

        diff_format = '      |%8.8s %5s %s%s'
        hunk_header = '@@ %s %s @@' % (line_range_before, line_range_after)
        self.logger.debug(diff_format % ('--------', '-----', '', hunk_header))
        line_num = hunk.old_start
        for mode, line in hunk.lines:
            if mode == '+':
                rev = ln = ''
            else:
                rev = line_to_culprit[line_num]
                ln = line_num
                line_num += 1
            self.logger.debug(diff_format % (rev, ln, mode, line.rstrip()))

    def tree_lookup(self, target_path, commit):
        """Navigate to the tree or blob object pointed to by the given target
        path for the given commit.  This is necessary because each git
        tree only contains entries for the directory it refers to, not
        recursively for all subdirectories.
        """
        segments = target_path.split("/")
        tree_or_blob = commit.tree
        path = ''
        while segments:
            dirent = segments.pop(0)
            if isinstance(tree_or_blob, pygit2.Tree):
                if dirent in tree_or_blob:
                    tree_or_blob = self.repo[tree_or_blob[dirent].oid]
                    #self.logger.debug('%s in %s' % (dirent, path))
                    if path:
                        path += '/'
                    path += dirent
                else:
                    # This is probably because we were called on a
                    # commit whose parent added a new directory.
                    self.logger.debug('      %s not in %s in %s' %
                                      (dirent, path, commit.hex[:8]))
                    return None
            else:
                self.logger.debug('      %s not a tree in %s' %
                                  (tree_or_blob, commit.hex[:8]))
                return None
        return tree_or_blob

    def edges(self):
        return [
            [ (dependent, dependency) for dependency in self.dependencies[dependent] ]
            for dependent in self.dependencies.keys()
        ]

def parse_args():
    parser = argparse.ArgumentParser(description='Auto-detect inter-commit dependencies.')
    parser.add_argument('--recurse', '-r', dest='recurse', action='store_true',
                        help='Follow dependencies recursively')
    parser.add_argument('--log', '-l', dest='log', action='store_true',
                        help='Show commit logs for calculated dependencies')
    parser.add_argument('--context-lines', '-c', dest='context_lines', type=int,
                        default=1, help='Number of lines of diff context to use')
    parser.add_argument('--debug', '-d', dest='debug', action='store_true',
                        help='Show debugging')

    options, args = parser.parse_known_args()

    if len(args) != 1:
        abort("usage: git deps rev")
    dependent_rev = args[0]
    return options, dependent_rev

def main():
    options, dependent_rev = parse_args()
    listener = CLIDependencyListener(options)
    detector = DependencyDetector(options, listener=listener)
    detector.find_dependencies(dependent_rev)

if __name__ == "__main__":
    main()
