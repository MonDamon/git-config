#!/usr/bin/perl

use strict;
use warnings;

use File::Find;
use File::stat;

use constant DOTS_EVERY => 10_000;

eval { require Number::Bytes::Human; };
my $NBH = $@ ? 0 : 1;
Number::Bytes::Human->import qw(format_bytes) if $NBH;

my %keys;

push @ARGV, '.' unless @ARGV;

my $processed = 0;
my $duplicate_sets = 0;
my $duplicate_files = 0;
my $wasted = 0;

$| = 1;
find(\&wanted, @ARGV);
print "\n" if $processed > DOTS_EVERY;
show_dups();

sub inc {
    if (++$processed % DOTS_EVERY == 0) {
        print ".";
    }
}

sub wanted {
    inc();
    return unless -l;

    my $dst = readlink($_) or die "readline($_) failed: $!\n";
    my $key = $dst;
    unless ($key =~ s!^(../)*\.git/annex/objects/!!) {
        #print "Skipping non-annexed symlink $File::Find::name -> $dst\n";
        return;
    }

    $key =~ s!/(SHA[\w-]+)/\1!/$1!;
    push @{ $keys{$key} }, $File::Find::name;
}

sub show_dups {
    while (my ($key, $files) = each %keys) {
        next unless @$files > 1;

        $duplicate_sets++;
        $duplicate_files += @$files;
        my $s = stat($files->[0])
            or die "stat($files->[0]) failed: $!\n";
        my $size = $s->size;
        my $surplus = @$files - 1;
        #print "$surplus surplus files at $size each\n";
        $wasted += $size * $surplus;
        print "$key\n";
        print map "   $_\n", @$files;
        print "\n";
    }

    my $hwasted = ($NBH ? format_bytes($wasted) : $wasted) . " bytes";
    print "$duplicate_files duplicate files in $duplicate_sets sets (wasted $hwasted)\n";
}
