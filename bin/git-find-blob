#!/usr/bin/perl

# From http://stackoverflow.com/questions/223678/git-which-commit-has-this-blob

use strict;
use warnings;

use Memoize;

sub usage {
  warn @_, "\n" if @_;

  (my $ME = $0) =~ s,.*/,,;

  die <<EOUSAGE;
Usage: $ME <blob> [<git-log arguments ...>]
Options:
  -h, --help           Show this help

Finds which commits have the given blob.
EOUSAGE
}

sub check_tree {
    my ($tree, $obj_name) = @_;
    my @subtree;

    {
        open my $ls_tree, '-|', git => 'ls-tree' => $tree
            or die "Couldn't open pipe to git-ls-tree: $!\n";

        while (<$ls_tree>) {
            /\A[0-7]{6} (\S+) (\S+)/
                or die "unexpected git-ls-tree output";
            return 1 if $2 eq $obj_name;
            push @subtree, $2 if $1 eq 'tree';
        }
    }

    check_tree($_, $obj_name) && return 1 for @subtree;

    return;
}

memoize 'check_tree';

usage if not @ARGV or $ARGV[0] eq '-h' or $ARGV[0] eq '--help';

my $blob_arg = shift;
open my $rev_parse, '-|', git => 'rev-parse' => '--verify', $blob_arg
    or die "Couldn't open pipe to git-rev-parse: $!\n"; 

chomp(my $obj_name = <$rev_parse> || '');
die "git rev-parse --verify $blob_arg failed\n"
    unless close($rev_parse);
die "git rev-parse returned unexpected output: $obj_name\n"
    unless $obj_name =~ /^[0-9a-f]{40}$/;

print "(full blob is $obj_name)\n" if $obj_name ne $blob_arg;

open my $log, '-|', git => log => @ARGV, '--pretty=format:%T %h %s'
    or die "Couldn't open pipe to git-log: $!\n";

while (<$log>) {
    chomp;
    my ( $tree, $commit, $subject ) = split " ", $_, 3;
    print "$commit $subject\n" if check_tree($tree, $obj_name);
}
